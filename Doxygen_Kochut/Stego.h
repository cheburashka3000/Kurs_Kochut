/** @file
* @author Кочут Н.А.
* @version 0.9.1
* @date 2019
* @copyright ИБСТ ПГУ
* @warning Это учебный пример.
* @brief Заголовочный файл для модуля стеганографии методом двойных пробелов.
*/
#pragma once
#include <iostream>
#include <fstream>
#include <string>
#include <cstdio>
using namespace std;
/** @brief Стеганография методом двойных пробелов.
* @details Путь к контейнеру устанавливается в конструкторе.
* Для скрытия и извлечения сообщения предназначены методы hide и extract.
* @warning Реализация только для английского языка!
*/
class Stego
{
private:
	char* PathToContainer;///< путь к контейнеру.
	/** @brief Вспомогательный метод
	* @details Метод помогает обеспечить перевод из цифр в символы.
	*/
	int ipow(int a,int b);
	/** @brief Проверка контейнера.
	* @param [in] what Константа для определения контейнер с сообщением или нет.
	* @details Метод проверяет:
	* 	- правильно ли указан путь к контейнеру;
	* 	- есть ли что-нибудь в контейнере.
	* @return Содержимое контейнера.
	*/
	inline string checkKont(const int& what);
	/** @brief Проверка документа с сообщением.
	* @param [in] mespyt Путь к сообщению
	* [in] kont Строка, содержащая текст контейнера
	* @details Метод проверяет:
	* 	- правильно ли указан путь к сообщению;
	* 	- есть ли что-нибудь в файле, в котором хранится сообщение.
	* @return Содержимое документа, в котором хранится сообщение.
	*/
	inline string checkMessage(char* mespyt, string& kont);
	/** @brief Проверка на колличество пробелов.
	* @param [in] text Содержимое контейнера, в котором должно хранится сообщение.
	* @details Метод проверяет может ли хранится в указанном контейнере сообщение.
	* @return Количество цифр, из которых состоит сообщение.
	*/
	inline int checkZifr(string& text);
public:
	/** @brief Конструктор без параметров.
	* @details Удаляет элемент класса, если ему не был присвоен параметр.
	*/
	Stego()=delete;
	/** @brief Конструктор для установки пути к контейнеру.
	* @param [in] contpyt Метод получает на вход путь к контейнеру.
	* @return путь к контейнеру.
	*/
	Stego(char* contpyt);
	/** @brief Скрытие сообщения.
	* @param [in] mespyt Путь к документу с сообщением.
	* @details Метод преобразует сообщение в двоичный вид.
	* Далее записывает его в пробелы контейнера.
	* "0"-один пробел, "1"-два пробела.
	* @return текст контейнера с скрытым сообщением.
	* @throw cipher_error, если файл с сообщением или контейнер не открылся или пустые, а также если в контейнере не может быть сообщения.
	*/
	string hide(char* mespyt);
	/** @brief Извлечение сообщения.
	* @details Метод извлекает из контейнера сообщение скрытое в пробелах.
	* "0"-один пробел, "1"-два пробела.
	* Преобразует сообщение из двоичного вида.
	* @return скрытое сообщение.
	* @throw cipher_error, если файл с сообщением или контейнер не открылся или пустые, а также если в контейнере не может быть сообщения.
	*/
	string extract();
};
/** @brief Обработчик ошибок.
*/
class stego_error: public invalid_argument
{
public:
	explicit stego_error (const string& what_arg):invalid_argument(what_arg) {};
	explicit stego_error (const char* what_arg):invalid_argument(what_arg) {};
};
